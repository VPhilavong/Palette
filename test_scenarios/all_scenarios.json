[
  {
    "id": "simple-button",
    "name": "Simple Button Component",
    "description": "Basic button component with primary/secondary variants",
    "message": "Create a button component with primary and secondary variants",
    "complexity": "simple",
    "expected_files": [
      "src/components/ui/button.tsx"
    ],
    "expected_components": [
      "Button"
    ],
    "expected_features": [
      "TypeScript types",
      "Tailwind styling",
      "Variant support"
    ],
    "test_project_type": "vite-react-shadcn",
    "estimated_duration": 30,
    "validation_criteria": {
      "typescript": "Should have proper TypeScript interface",
      "styling": "Should use Tailwind CSS classes",
      "accessibility": "Should have proper button type and aria attributes",
      "reusability": "Should accept children and onClick props"
    },
    "tags": [
      "component",
      "ui",
      "basic"
    ]
  },
  {
    "id": "simple-card",
    "name": "Card Component",
    "description": "Reusable card component with header, content, and footer slots",
    "message": "Create a card component with header, content area, and optional footer",
    "complexity": "simple",
    "expected_files": [
      "src/components/ui/card.tsx"
    ],
    "expected_components": [
      "Card",
      "CardHeader",
      "CardContent",
      "CardFooter"
    ],
    "expected_features": [
      "Compound component pattern",
      "Flexible layout",
      "TypeScript support"
    ],
    "test_project_type": "vite-react-shadcn",
    "estimated_duration": 45,
    "validation_criteria": {
      "structure": "Should use compound component pattern",
      "styling": "Should have consistent spacing and borders",
      "flexibility": "Should allow custom content in each section"
    },
    "tags": [
      "component",
      "ui",
      "layout"
    ]
  },
  {
    "id": "simple-form",
    "name": "Contact Form",
    "description": "Basic contact form with validation",
    "message": "Create a contact form with name, email, and message fields with validation",
    "complexity": "simple",
    "expected_files": [
      "src/components/ContactForm.tsx"
    ],
    "expected_components": [
      "ContactForm"
    ],
    "expected_features": [
      "Form validation",
      "Error handling",
      "Submit functionality"
    ],
    "test_project_type": "vite-react-shadcn",
    "estimated_duration": 60,
    "validation_criteria": {
      "validation": "Should validate email format and required fields",
      "accessibility": "Should have proper labels and error messages",
      "ux": "Should provide clear feedback on form submission"
    },
    "tags": [
      "form",
      "validation",
      "user-input"
    ]
  },
  {
    "id": "medium-todo-app",
    "name": "Todo List Application",
    "description": "Interactive todo list with add, complete, delete, and filter functionality",
    "message": "Create a todo list app with add, complete, delete and filter (all/active/completed) functionality",
    "complexity": "medium",
    "expected_files": [
      "src/components/TodoApp.tsx",
      "src/components/TodoItem.tsx",
      "src/components/TodoList.tsx",
      "src/components/TodoFilters.tsx"
    ],
    "expected_components": [
      "TodoApp",
      "TodoItem",
      "TodoList",
      "TodoFilters"
    ],
    "expected_features": [
      "State management with useState/useReducer",
      "Local storage persistence",
      "Filter functionality",
      "CRUD operations"
    ],
    "test_project_type": "vite-react-shadcn",
    "estimated_duration": 120,
    "validation_criteria": {
      "functionality": "Should support all CRUD operations",
      "persistence": "Should save todos to localStorage",
      "filtering": "Should filter todos by status",
      "state": "Should manage complex state correctly"
    },
    "tags": [
      "app",
      "state-management",
      "crud",
      "interactive"
    ]
  },
  {
    "id": "medium-image-gallery",
    "name": "Image Gallery with Modal",
    "description": "Responsive image gallery with lightbox modal for viewing full-size images",
    "message": "Create a responsive image gallery with thumbnail grid and modal lightbox for viewing full-size images",
    "complexity": "medium",
    "expected_files": [
      "src/components/ImageGallery.tsx",
      "src/components/ImageModal.tsx",
      "src/components/ImageThumbnail.tsx"
    ],
    "expected_components": [
      "ImageGallery",
      "ImageModal",
      "ImageThumbnail"
    ],
    "expected_features": [
      "Responsive grid layout",
      "Modal overlay",
      "Navigation between images",
      "Keyboard accessibility"
    ],
    "test_project_type": "vite-react-shadcn",
    "estimated_duration": 90,
    "validation_criteria": {
      "responsive": "Should adapt to different screen sizes",
      "accessibility": "Should support keyboard navigation",
      "performance": "Should optimize image loading",
      "ux": "Should provide smooth transitions"
    },
    "tags": [
      "gallery",
      "modal",
      "responsive",
      "media"
    ]
  },
  {
    "id": "medium-data-table",
    "name": "Data Table with Sorting",
    "description": "Data table component with sorting, pagination, and search functionality",
    "message": "Create a data table that displays user data with sorting, pagination, and search functionality",
    "complexity": "medium",
    "expected_files": [
      "src/components/DataTable.tsx",
      "src/components/TableHeader.tsx",
      "src/components/TablePagination.tsx",
      "src/components/TableSearch.tsx"
    ],
    "expected_components": [
      "DataTable",
      "TableHeader",
      "TablePagination",
      "TableSearch"
    ],
    "expected_features": [
      "Column sorting",
      "Pagination controls",
      "Search/filter functionality",
      "Responsive design"
    ],
    "test_project_type": "vite-react-shadcn",
    "estimated_duration": 110,
    "validation_criteria": {
      "sorting": "Should sort data by columns",
      "pagination": "Should paginate large datasets",
      "search": "Should filter data by search term",
      "performance": "Should handle large datasets efficiently"
    },
    "tags": [
      "table",
      "data",
      "sorting",
      "pagination"
    ]
  },
  {
    "id": "complex-dashboard",
    "name": "Admin Dashboard",
    "description": "Complete admin dashboard with sidebar navigation, header, charts, and data tables",
    "message": "Create a complete admin dashboard with sidebar navigation, header with user profile, data visualization charts, and user management table",
    "complexity": "complex",
    "expected_files": [
      "src/pages/Dashboard.tsx",
      "src/components/layout/Sidebar.tsx",
      "src/components/layout/Header.tsx",
      "src/components/layout/DashboardLayout.tsx",
      "src/components/charts/BarChart.tsx",
      "src/components/charts/LineChart.tsx",
      "src/components/UserTable.tsx",
      "src/components/StatsCards.tsx"
    ],
    "expected_components": [
      "Dashboard",
      "Sidebar",
      "Header",
      "DashboardLayout",
      "BarChart",
      "LineChart",
      "UserTable",
      "StatsCards"
    ],
    "expected_features": [
      "Responsive layout with sidebar",
      "Data visualization with charts",
      "User management interface",
      "Statistics overview cards",
      "Mobile-responsive navigation"
    ],
    "test_project_type": "vite-react-shadcn",
    "estimated_duration": 300,
    "validation_criteria": {
      "layout": "Should have proper dashboard layout structure",
      "navigation": "Should include working navigation system",
      "responsive": "Should work on mobile and desktop",
      "data_viz": "Should display charts and data tables",
      "composition": "Should properly compose multiple components"
    },
    "tags": [
      "dashboard",
      "admin",
      "charts",
      "layout",
      "complex"
    ]
  },
  {
    "id": "complex-ecommerce",
    "name": "E-commerce Product Page",
    "description": "Complete e-commerce product page with gallery, details, reviews, and shopping cart integration",
    "message": "Create a complete e-commerce product page with image gallery, product details, customer reviews, related products, and add to cart functionality",
    "complexity": "complex",
    "expected_files": [
      "src/pages/ProductPage.tsx",
      "src/components/product/ProductGallery.tsx",
      "src/components/product/ProductInfo.tsx",
      "src/components/product/ProductReviews.tsx",
      "src/components/product/RelatedProducts.tsx",
      "src/components/cart/AddToCartButton.tsx",
      "src/components/product/ProductVariants.tsx",
      "src/components/reviews/ReviewCard.tsx"
    ],
    "expected_components": [
      "ProductPage",
      "ProductGallery",
      "ProductInfo",
      "ProductReviews",
      "RelatedProducts",
      "AddToCartButton",
      "ProductVariants",
      "ReviewCard"
    ],
    "expected_features": [
      "Image gallery with zoom",
      "Product variant selection",
      "Customer reviews system",
      "Shopping cart integration",
      "Related products recommendations"
    ],
    "test_project_type": "vite-react-shadcn",
    "estimated_duration": 350,
    "validation_criteria": {
      "gallery": "Should have working image gallery with navigation",
      "variants": "Should handle product variants (size, color, etc.)",
      "reviews": "Should display and manage customer reviews",
      "cart": "Should integrate with shopping cart functionality",
      "ux": "Should provide excellent shopping experience"
    },
    "tags": [
      "ecommerce",
      "product",
      "gallery",
      "reviews",
      "cart"
    ]
  },
  {
    "id": "complex-landing-page",
    "name": "SaaS Landing Page",
    "description": "Complete SaaS landing page with hero, features, testimonials, pricing, and CTA sections",
    "message": "Create a complete SaaS landing page with hero section, features showcase, customer testimonials, pricing tiers, and call-to-action sections",
    "complexity": "complex",
    "expected_files": [
      "src/pages/LandingPage.tsx",
      "src/components/landing/HeroSection.tsx",
      "src/components/landing/FeaturesSection.tsx",
      "src/components/landing/TestimonialsSection.tsx",
      "src/components/landing/PricingSection.tsx",
      "src/components/landing/CTASection.tsx",
      "src/components/landing/Navbar.tsx",
      "src/components/landing/Footer.tsx"
    ],
    "expected_components": [
      "LandingPage",
      "HeroSection",
      "FeaturesSection",
      "TestimonialsSection",
      "PricingSection",
      "CTASection",
      "Navbar",
      "Footer"
    ],
    "expected_features": [
      "Responsive design",
      "Smooth scrolling navigation",
      "Pricing comparison table",
      "Customer testimonials carousel",
      "Call-to-action optimization"
    ],
    "test_project_type": "vite-react-shadcn",
    "estimated_duration": 280,
    "validation_criteria": {
      "design": "Should have modern, professional design",
      "responsive": "Should work perfectly on all devices",
      "conversion": "Should optimize for user conversion",
      "performance": "Should load quickly and smoothly",
      "sections": "Should have all required landing page sections"
    },
    "tags": [
      "landing-page",
      "saas",
      "marketing",
      "responsive",
      "conversion"
    ]
  },
  {
    "id": "edge-no-tailwind",
    "name": "Component Without Tailwind",
    "description": "Test generation in project without Tailwind CSS setup",
    "message": "Create a button component with styling in a project without Tailwind CSS",
    "complexity": "simple",
    "expected_files": [
      "src/components/Button.tsx"
    ],
    "expected_components": [
      "Button"
    ],
    "expected_features": [
      "CSS modules or styled-components",
      "Fallback styling approach"
    ],
    "test_project_type": "no-tailwind",
    "estimated_duration": 45,
    "validation_criteria": {
      "styling": "Should use alternative styling method",
      "fallback": "Should work without Tailwind dependencies",
      "adaptability": "Should adapt to project constraints"
    },
    "tags": [
      "edge-case",
      "no-tailwind",
      "fallback"
    ]
  },
  {
    "id": "edge-next-js",
    "name": "Next.js App Router Page",
    "description": "Test generation with Next.js App Router structure",
    "message": "Create a blog page with posts listing and individual post view using Next.js App Router",
    "complexity": "medium",
    "expected_files": [
      "app/blog/page.tsx",
      "app/blog/[slug]/page.tsx",
      "components/BlogCard.tsx",
      "components/BlogPost.tsx"
    ],
    "expected_components": [
      "BlogCard",
      "BlogPost"
    ],
    "expected_features": [
      "Next.js App Router structure",
      "Dynamic routes",
      "Server components"
    ],
    "test_project_type": "next-shadcn",
    "estimated_duration": 100,
    "validation_criteria": {
      "structure": "Should follow Next.js App Router conventions",
      "routing": "Should implement dynamic routing correctly",
      "ssr": "Should work with server-side rendering"
    },
    "tags": [
      "next-js",
      "app-router",
      "dynamic-routes"
    ]
  },
  {
    "id": "edge-accessibility",
    "name": "High Accessibility Component",
    "description": "Test generation with explicit accessibility requirements",
    "message": "Create a modal dialog component with full ARIA support, keyboard navigation, and screen reader compatibility",
    "complexity": "medium",
    "expected_files": [
      "src/components/AccessibleModal.tsx"
    ],
    "expected_components": [
      "AccessibleModal"
    ],
    "expected_features": [
      "Full ARIA support",
      "Keyboard navigation",
      "Focus management",
      "Screen reader compatibility"
    ],
    "test_project_type": "vite-react-shadcn",
    "estimated_duration": 80,
    "validation_criteria": {
      "aria": "Should have proper ARIA attributes",
      "keyboard": "Should support full keyboard navigation",
      "focus": "Should manage focus correctly",
      "screenreader": "Should work with screen readers"
    },
    "tags": [
      "accessibility",
      "modal",
      "aria",
      "keyboard-nav"
    ]
  }
]