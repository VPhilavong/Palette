"""
Real-time Preview Generation for Beautiful UI Components

This module generates live previews of UI components, allowing users to see
their designs in real-time as they iterate on prompts and specifications.
"""

import asyncio
import json
import base64
import tempfile
import os
from typing import Dict, List, Optional, Any, Tuple
from pathlib import Path
from dataclasses import dataclass
from enum import Enum

from ..aesthetics.aesthetic_prompts import DesignStyle, AestheticConfig
from ..aesthetics.component_composer import ComponentComposer, LayoutType
from ..generation.mcp_shadcn_generator import MCPShadcnGenerator


class PreviewSize(Enum):
    """Preview viewport sizes"""
    MOBILE = "mobile"
    TABLET = "tablet" 
    DESKTOP = "desktop"
    FULL = "full"


@dataclass
class PreviewConfig:
    """Configuration for preview generation"""
    size: PreviewSize = PreviewSize.DESKTOP
    theme: str = "light"  # light, dark, auto
    show_grid: bool = False
    show_spacing: bool = False
    interactive: bool = True
    include_variants: bool = True


@dataclass
class PreviewResult:
    """Result of preview generation"""
    html: str
    css: str
    javascript: str
    screenshot_base64: Optional[str]
    interactive_url: Optional[str]
    variants: List[Dict[str, Any]]
    metadata: Dict[str, Any]


class PreviewGenerator:
    """Generates real-time previews of UI components"""
    
    def __init__(self, project_path: Optional[str] = None):
        self.project_path = project_path
        self.component_composer = ComponentComposer()
        self.mcp_generator = MCPShadcnGenerator(project_path)
        self.preview_cache = {}
        
    async def generate_component_preview(self,
                                       prompt: str,
                                       config: PreviewConfig = PreviewConfig(),
                                       real_time: bool = True) -> PreviewResult:
        """Generate a real-time preview of a component"""
        
        # Check cache for faster previews
        cache_key = self._get_cache_key(prompt, config)
        if cache_key in self.preview_cache and not real_time:
            return self.preview_cache[cache_key]
        
        try:
            # Generate the component using MCP if available
            component_data = await self._generate_component_data(prompt)
            
            # Create preview HTML structure
            html = self._create_preview_html(component_data, config)
            
            # Generate CSS with responsive breakpoints
            css = self._create_preview_css(component_data, config)
            
            # Add interactive JavaScript
            javascript = self._create_preview_javascript(component_data, config)
            
            # Generate variants if requested
            variants = []
            if config.include_variants:
                variants = await self._generate_component_variants(prompt, component_data)
            
            # Create preview result
            result = PreviewResult(
                html=html,
                css=css,
                javascript=javascript,
                screenshot_base64=None,  # Would be generated by browser automation
                interactive_url=None,    # Would be hosted preview URL
                variants=variants,
                metadata={
                    "prompt": prompt,
                    "config": config.__dict__,
                    "generation_time": asyncio.get_event_loop().time(),
                    "component_type": component_data.get("component_type", "unknown")
                }
            )
            
            # Cache the result
            self.preview_cache[cache_key] = result
            
            return result
            
        except Exception as e:
            # Return error preview
            return self._create_error_preview(str(e), prompt)
    
    async def generate_layout_preview(self,
                                    description: str,
                                    components: List[str],
                                    config: PreviewConfig = PreviewConfig()) -> PreviewResult:
        """Generate preview of a complete layout"""
        
        try:
            # Use component composer to create layout
            composition = self.component_composer.compose_layout(
                description=description,
                components=components,
                style=DesignStyle.MODERN_MINIMAL,
                responsive=True
            )
            
            # Create layout preview
            html = self._create_layout_preview_html(composition, config)
            css = self._create_layout_preview_css(composition, config)
            javascript = self._create_layout_preview_javascript(composition, config)
            
            # Generate layout variants
            variants = []
            if config.include_variants:
                variants = await self._generate_layout_variants(description, components)
            
            result = PreviewResult(
                html=html,
                css=css,
                javascript=javascript,
                screenshot_base64=None,
                interactive_url=None,
                variants=variants,
                metadata={
                    "description": description,
                    "layout_type": composition.layout_type.value,
                    "components": components,
                    "config": config.__dict__,
                    "generation_time": asyncio.get_event_loop().time()
                }
            )
            
            return result
            
        except Exception as e:
            return self._create_error_preview(str(e), description)
    
    async def generate_comparison_preview(self,
                                        prompt: str,
                                        styles: List[DesignStyle]) -> Dict[str, PreviewResult]:
        """Generate side-by-side comparison of different styles"""
        
        results = {}
        
        for style in styles:
            try:
                # Generate component with specific style
                style_prompt = f"{prompt} in {style.value} style"
                config = PreviewConfig(size=PreviewSize.DESKTOP, include_variants=False)
                
                result = await self.generate_component_preview(style_prompt, config)
                results[style.value] = result
                
            except Exception as e:
                results[style.value] = self._create_error_preview(str(e), style_prompt)
        
        return results
    
    async def generate_responsive_preview(self, prompt: str) -> Dict[str, PreviewResult]:
        """Generate previews for different screen sizes"""
        
        results = {}
        sizes = [PreviewSize.MOBILE, PreviewSize.TABLET, PreviewSize.DESKTOP]
        
        for size in sizes:
            config = PreviewConfig(size=size, include_variants=False)
            result = await self.generate_component_preview(prompt, config)
            results[size.value] = result
        
        return results
    
    def create_interactive_preview_server(self, port: int = 8000) -> str:
        """Create a local server for interactive previews"""
        
        # This would start a local web server for real-time preview updates
        # For now, return a mock URL
        return f"http://localhost:{port}/preview"
    
    async def _generate_component_data(self, prompt: str) -> Dict[str, Any]:
        """Generate component data using available methods"""
        
        try:
            # Try MCP generation first
            if await self._is_mcp_available():
                return await self.mcp_generator.generate_beautiful_component(prompt)
        except Exception as e:
            print(f"MCP generation failed, using fallback: {e}")
        
        # Fallback to composition engine
        return await self._generate_fallback_component(prompt)
    
    async def _generate_fallback_component(self, prompt: str) -> Dict[str, Any]:
        """Generate component using fallback methods"""
        
        # Use component composer for layout
        composition = self.component_composer.compose_layout(
            description=prompt,
            components=["button", "card"],  # Default components
            style=DesignStyle.MODERN_MINIMAL,
            responsive=True
        )
        
        return {
            "component_code": composition.code,
            "component_type": "composed_layout",
            "style": "modern_minimal",
            "dependencies": ["@/components/ui/button", "@/components/ui/card"],
            "animations": composition.animations,
            "accessibility_features": composition.accessibility_features
        }
    
    async def _is_mcp_available(self) -> bool:
        """Check if MCP connection is available"""
        try:
            return await self.mcp_generator.initialize()
        except:
            return False
    
    def _create_preview_html(self, component_data: Dict[str, Any], config: PreviewConfig) -> str:
        """Create preview HTML structure"""
        
        component_code = component_data.get("component_code", "")
        component_type = component_data.get("component_type", "component")
        
        # Convert JSX-like code to HTML for preview
        html_code = self._jsx_to_html(component_code)
        
        viewport_class = self._get_viewport_class(config.size)
        theme_class = f"theme-{config.theme}"
        grid_class = "show-grid" if config.show_grid else ""
        spacing_class = "show-spacing" if config.show_spacing else ""
        
        return f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Component Preview - {component_type}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/lucide@latest/dist/umd/lucide.js">
</head>
<body class="{theme_class} {grid_class} {spacing_class}">
    <div class="preview-container {viewport_class}">
        <div class="preview-header">
            <h3>Preview: {component_type}</h3>
            <div class="preview-controls">
                <button onclick="toggleTheme()">Toggle Theme</button>
                <button onclick="toggleGrid()">Toggle Grid</button>
                <button onclick="toggleSpacing()">Toggle Spacing</button>
            </div>
        </div>
        <div class="preview-content">
            {html_code}
        </div>
        <div class="preview-info">
            <p>Generated from: "{component_data.get('original_prompt', 'N/A')}"</p>
            <p>Dependencies: {', '.join(component_data.get('dependencies', []))}</p>
            <p>Animations: {len(component_data.get('animations', []))} effects</p>
        </div>
    </div>
</body>
</html>"""
    
    def _create_preview_css(self, component_data: Dict[str, Any], config: PreviewConfig) -> str:
        """Create preview-specific CSS"""
        
        viewport_styles = self._get_viewport_styles(config.size)
        theme_styles = self._get_theme_styles(config.theme)
        
        return f"""
/* Preview Container Styles */
.preview-container {{
    {viewport_styles}
    margin: 0 auto;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}}

/* Viewport Styles */
{theme_styles}

/* Preview Header */
.preview-header {{
    background: #f9fafb;
    border-bottom: 1px solid #e5e7eb;
    padding: 12px 16px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}}

.preview-header h3 {{
    margin: 0;
    font-size: 14px;
    font-weight: 600;
    color: #374151;
}}

.preview-controls button {{
    background: #ffffff;
    border: 1px solid #d1d5db;
    border-radius: 4px;
    padding: 4px 8px;
    font-size: 12px;
    margin-left: 8px;
    cursor: pointer;
}}

.preview-controls button:hover {{
    background: #f3f4f6;
}}

/* Preview Content */
.preview-content {{
    padding: 24px;
    min-height: 200px;
    background: white;
    position: relative;
}}

/* Grid Overlay */
.show-grid .preview-content::before {{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: 
        linear-gradient(rgba(59, 130, 246, 0.1) 1px, transparent 1px),
        linear-gradient(90deg, rgba(59, 130, 246, 0.1) 1px, transparent 1px);
    background-size: 8px 8px;
    pointer-events: none;
    z-index: 1;
}}

/* Spacing Indicators */
.show-spacing * {{
    outline: 1px solid rgba(16, 185, 129, 0.3) !important;
    position: relative;
}}

/* Preview Info */
.preview-info {{
    background: #f9fafb;
    border-top: 1px solid #e5e7eb;
    padding: 12px 16px;
    font-size: 12px;
    color: #6b7280;
}}

.preview-info p {{
    margin: 4px 0;
}}

/* Responsive Breakpoints */
@media (max-width: 768px) {{
    .preview-container.desktop {{
        transform: scale(0.8);
        transform-origin: top left;
    }}
}}

/* Animation Enhancements */
.preview-content * {{
    transition: all 0.2s ease;
}}

.preview-content *:hover {{
    transform: translateY(-1px);
}}
"""
    
    def _create_preview_javascript(self, component_data: Dict[str, Any], config: PreviewConfig) -> str:
        """Create preview JavaScript for interactivity"""
        
        animations = component_data.get("animations", [])
        
        return f"""
// Preview Interactivity
let currentTheme = '{config.theme}';
let showGrid = {str(config.show_grid).lower()};
let showSpacing = {str(config.show_spacing).lower()};

function toggleTheme() {{
    const body = document.body;
    if (currentTheme === 'light') {{
        body.classList.remove('theme-light');
        body.classList.add('theme-dark');
        currentTheme = 'dark';
    }} else {{
        body.classList.remove('theme-dark');  
        body.classList.add('theme-light');
        currentTheme = 'light';
    }}
}}

function toggleGrid() {{
    const body = document.body;
    if (showGrid) {{
        body.classList.remove('show-grid');
        showGrid = false;
    }} else {{
        body.classList.add('show-grid');
        showGrid = true;
    }}
}}

function toggleSpacing() {{
    const body = document.body;
    if (showSpacing) {{
        body.classList.remove('show-spacing');
        showSpacing = false;
    }} else {{
        body.classList.add('show-spacing');
        showSpacing = true;
    }}
}}

// Component-specific animations
const animations = {json.dumps(animations)};

function initAnimations() {{
    const elements = document.querySelectorAll('.preview-content *');
    elements.forEach((el, index) => {{
        if (animations.includes('stagger')) {{
            el.style.animationDelay = `${{index * 100}}ms`;
        }}
    }});
}}

// Initialize on load
document.addEventListener('DOMContentLoaded', () => {{
    initAnimations();
    
    // Add hover effects for interactive elements
    const buttons = document.querySelectorAll('button, .clickable');
    buttons.forEach(btn => {{
        btn.addEventListener('mouseenter', () => {{
            btn.style.transform = 'translateY(-2px)';
            btn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.15)';
        }});
        
        btn.addEventListener('mouseleave', () => {{
            btn.style.transform = 'translateY(0)';
            btn.style.boxShadow = 'none';
        }});
    }});
}});

// Real-time updates (would connect to WebSocket in full implementation)
function updatePreview(newData) {{
    // This would update the preview in real-time
    console.log('Preview update:', newData);
}}
"""
    
    def _create_layout_preview_html(self, composition, config: PreviewConfig) -> str:
        """Create HTML for layout preview"""
        
        # Convert the composition code to HTML
        html_code = self._jsx_to_html(composition.code)
        viewport_class = self._get_viewport_class(config.size)
        
        return f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Layout Preview - {composition.layout_type.value}</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="theme-{config.theme}">
    <div class="preview-container {viewport_class}">
        <div class="preview-header">
            <h3>Layout Preview: {composition.layout_type.value}</h3>
            <div class="layout-info">
                <span>Components: {len(composition.components)}</span>
                <span>Animations: {len(composition.animations)}</span>
                <span>A11y Features: {len(composition.accessibility_features)}</span>
            </div>
        </div>
        <div class="preview-content">
            {html_code}
        </div>
    </div>
</body>
</html>"""
    
    def _create_layout_preview_css(self, composition, config: PreviewConfig) -> str:
        """Create CSS for layout preview"""
        
        return self._create_preview_css(
            {
                "animations": composition.animations,
                "original_prompt": composition.description
            },
            config
        )
    
    def _create_layout_preview_javascript(self, composition, config: PreviewConfig) -> str:
        """Create JavaScript for layout preview"""
        
        return self._create_preview_javascript(
            {
                "animations": composition.animations,
            },
            config
        )
    
    async def _generate_component_variants(self, prompt: str, component_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Generate different variants of the component"""
        
        variants = []
        variant_styles = [DesignStyle.BOLD_VIBRANT, DesignStyle.GLASSMORPHISM, DesignStyle.DARK_ELEGANT]
        
        for style in variant_styles:
            try:
                variant_prompt = f"{prompt} with {style.value} styling"
                variant_data = await self._generate_component_data(variant_prompt)
                
                variants.append({
                    "style": style.value,
                    "html": self._jsx_to_html(variant_data.get("component_code", "")),
                    "description": f"{style.value} variant"
                })
            except Exception as e:
                print(f"Failed to generate {style.value} variant: {e}")
        
        return variants
    
    async def _generate_layout_variants(self, description: str, components: List[str]) -> List[Dict[str, Any]]:
        """Generate different layout variants"""
        
        variants = []
        layout_styles = [DesignStyle.MODERN_MINIMAL, DesignStyle.BOLD_VIBRANT, DesignStyle.ENTERPRISE]
        
        for style in layout_styles:
            try:
                composition = self.component_composer.compose_layout(
                    description=description,
                    components=components,
                    style=style,
                    responsive=True
                )
                
                variants.append({
                    "style": style.value,
                    "html": self._jsx_to_html(composition.code),
                    "description": f"{style.value} layout variant"
                })
            except Exception as e:
                print(f"Failed to generate {style.value} layout variant: {e}")
        
        return variants
    
    def _jsx_to_html(self, jsx_code: str) -> str:
        """Convert JSX-like code to HTML for preview"""
        
        # Simple JSX to HTML conversion
        # This is a basic implementation - a full version would use a proper parser
        html = jsx_code
        
        # Replace JSX className with class
        html = html.replace('className="', 'class="')
        
        # Remove function component wrapper
        html = html.replace('export function', '')
        html = html.replace('() {', '')
        html = html.replace('return (', '')
        html = html.replace(');', '')
        html = html.replace('}}', '')
        
        # Clean up extra whitespace
        lines = html.split('\n')
        cleaned_lines = []
        for line in lines:
            stripped = line.strip()
            if stripped and not stripped.startswith('import') and not stripped.startswith('//'):
                cleaned_lines.append(stripped)
        
        return '\n'.join(cleaned_lines)
    
    def _get_viewport_class(self, size: PreviewSize) -> str:
        """Get CSS class for viewport size"""
        return {
            PreviewSize.MOBILE: "mobile",
            PreviewSize.TABLET: "tablet", 
            PreviewSize.DESKTOP: "desktop",
            PreviewSize.FULL: "full"
        }.get(size, "desktop")
    
    def _get_viewport_styles(self, size: PreviewSize) -> str:
        """Get CSS styles for viewport size"""
        return {
            PreviewSize.MOBILE: "width: 375px; height: 667px;",
            PreviewSize.TABLET: "width: 768px; height: 1024px;",
            PreviewSize.DESKTOP: "width: 1200px; height: 800px;",
            PreviewSize.FULL: "width: 100%; height: 100vh;"
        }.get(size, "width: 1200px; height: 800px;")
    
    def _get_theme_styles(self, theme: str) -> str:
        """Get CSS styles for theme"""
        if theme == "dark":
            return """
.theme-dark {
    background: #1f2937;
    color: #f9fafb;
}

.theme-dark .preview-content {
    background: #111827;
}

.theme-dark .preview-header {
    background: #374151;
    border-color: #4b5563;
}
"""
        else:
            return """
.theme-light {
    background: #ffffff;
    color: #111827;
}

.theme-light .preview-content {
    background: #ffffff;
}
"""
    
    def _get_cache_key(self, prompt: str, config: PreviewConfig) -> str:
        """Generate cache key for preview"""
        return f"{hash(prompt)}_{hash(str(config.__dict__))}"
    
    def _create_error_preview(self, error_message: str, prompt: str) -> PreviewResult:
        """Create error preview when generation fails"""
        
        error_html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Preview Error</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div class="preview-container max-w-2xl mx-auto mt-8">
        <div class="bg-red-50 border border-red-200 rounded-lg p-6">
            <div class="flex items-center mb-4">
                <div class="bg-red-100 rounded-full p-2 mr-3">
                    <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
                <h3 class="text-lg font-semibold text-red-800">Preview Generation Failed</h3>
            </div>
            <p class="text-red-700 mb-4">
                <strong>Prompt:</strong> {prompt}
            </p>
            <p class="text-red-600 text-sm mb-4">
                <strong>Error:</strong> {error_message}
            </p>
            <div class="bg-red-100 rounded-md p-3">
                <p class="text-red-800 text-sm">
                    <strong>Suggestions:</strong>
                </p>
                <ul class="text-red-700 text-sm mt-2 list-disc list-inside">
                    <li>Check if all required dependencies are installed</li>
                    <li>Verify API keys are configured correctly</li>
                    <li>Try simplifying the prompt</li>
                    <li>Ensure MCP servers are running</li>
                </ul>
            </div>
        </div>
    </div>
</body>
</html>"""
        
        return PreviewResult(
            html=error_html,
            css="",
            javascript="",
            screenshot_base64=None,
            interactive_url=None,
            variants=[],
            metadata={
                "error": error_message,
                "prompt": prompt,
                "generation_time": asyncio.get_event_loop().time()
            }
        )


# Convenience functions for quick preview generation
async def generate_quick_preview(prompt: str, 
                               size: PreviewSize = PreviewSize.DESKTOP,
                               theme: str = "light") -> PreviewResult:
    """Generate a quick preview of a component"""
    generator = PreviewGenerator()
    config = PreviewConfig(size=size, theme=theme)
    return await generator.generate_component_preview(prompt, config)


async def generate_responsive_previews(prompt: str) -> Dict[str, PreviewResult]:
    """Generate previews for all screen sizes"""
    generator = PreviewGenerator()
    return await generator.generate_responsive_preview(prompt)


async def generate_style_comparison(prompt: str) -> Dict[str, PreviewResult]:
    """Generate style comparison previews"""
    generator = PreviewGenerator()
    styles = [DesignStyle.MODERN_MINIMAL, DesignStyle.BOLD_VIBRANT, DesignStyle.GLASSMORPHISM]
    return await generator.generate_comparison_preview(prompt, styles)